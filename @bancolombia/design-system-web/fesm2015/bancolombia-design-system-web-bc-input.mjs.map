{"version":3,"file":"bancolombia-design-system-web-bc-input.mjs","sources":["../../../projects/ng_bds/bc-input/bc-input.constants.ts","../../../projects/ng_bds/bc-input/bc-input.directive.ts","../../../projects/ng_bds/bc-input/bc-form-field/bc-form-field.component.ts","../../../projects/ng_bds/bc-input/bc-input.module.ts","../../../projects/ng_bds/bc-input/bancolombia-design-system-web-bc-input.ts"],"sourcesContent":["import { BcCommonConstants } from '@bancolombia/design-system-behaviors';\nexport const BC_INPUT_ACTIVE_CLASS = `${BcCommonConstants.PREFIX_LIB}-active`;\nexport const INPUT_VALIDATION_CLASS = `${BcCommonConstants.PREFIX_LIB}-${BcCommonConstants.INPUT_TAG}-validation`;\nexport const INPUT_VALUE_CLASS = `${BcCommonConstants.PREFIX_LIB}-${BcCommonConstants.INPUT_TAG}-value`;\nexport const INPUT_ERROR_DIRECTIVE = `${BcCommonConstants.PREFIX_LIB}-input-error`;\nexport const INPUT_SUCCESS_DIRECTIVE = `${BcCommonConstants.PREFIX_LIB}-input-success`;\nexport const INPUT_PASSWORD_CLASS = `${BcCommonConstants.PREFIX_LIB}-${BcCommonConstants.INPUT_TAG}-password`;\n","import {\n  Directive,\n  Input,\n  ElementRef,\n  Renderer2,\n  AfterViewChecked,\n  OnChanges,\n  SimpleChanges,\n  HostBinding,\n  HostListener,\n  Optional,\n  Self,\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { BcCommonConstants, BcInputBehavior, INPUT } from '@bancolombia/design-system-behaviors';\nimport {\n  BC_INPUT_ACTIVE_CLASS,\n  INPUT_ERROR_DIRECTIVE,\n  INPUT_SUCCESS_DIRECTIVE,\n  INPUT_VALIDATION_CLASS,\n  INPUT_VALUE_CLASS,\n} from './bc-input.constants';\n\nexport enum BcInputStates {\n  default = 'default',\n  error = 'error',\n  valid = 'valid',\n  success = 'success',\n}\n/**\n * Bajo esta directiva se configura el componente \"Input\".\n *\n * @export\n * @class BcInputDirective\n * @implements {AfterViewChecked}\n */\n@Directive({\n  selector: '[bc-input]',\n})\nexport class BcInputDirective  implements AfterViewChecked, OnChanges, ControlValueAccessor {\n  parent: HTMLDivElement;\n  input: HTMLInputElement;\n  iconRight: HTMLElement;\n  iconLeft: HTMLElement;\n  span: HTMLSpanElement;\n  textArea: HTMLTextAreaElement;\n  label: HTMLLabelElement;\n\n  /**\n   * Este parámetro nos indica en qué estado se encuentra el componente.\n   * Los estados permitidos son: {'default', 'error', 'valid'}.\n   *\n   * @type {BcInputStates}\n   * @memberof BcInputDirective\n   */\n  @Input() state: BcInputStates = BcInputStates.default;\n\n  @Input('aria-label') ariaLabel;\n\n  @Input() inputValue: boolean = false;\n  @Input() inputValidation: boolean = false;\n\n  @HostBinding('class') class = INPUT;\n\n  inputBehavior: BcInputBehavior;\n  value: any;\n\n  @HostListener('input') onInput() {\n    const val = this.elmRef.nativeElement.value;\n    this.value = this.inputValue ? this.replaceSeparator(val) : val;\n    this.onChange(this.value);\n    this.onTouch();\n  }\n\n  @HostListener('blur') onBlur() {\n    this.onTouch();\n  }\n\n  disabled: boolean = false;\n\n  constructor(\n    @Self() @Optional() public controlDirective: NgControl,\n    private elmRef: ElementRef,\n    private renderer: Renderer2\n  ) {\n    this.inputBehavior = new BcInputBehavior();\n    if (controlDirective) {\n      controlDirective.valueAccessor;\n    }\n  }\n  registerOnChange(fn: any): void {\n    throw new Error('Method not implemented.');\n  }\n  registerOnTouched(fn: any): void {\n    throw new Error('Method not implemented.');\n  }\n\n  onChange = (m: any) => {};\n  onTouch = () => {};\n  get model() {\n    return this.value;\n  }\n  ngAfterViewInit() {\n    if (this.controlDirective && this.controlDirective.statusChanges) {\n      this.controlDirective.statusChanges.subscribe((element) => {\n        if (element === 'INVALID') {\n          this.renderer.addClass(this.elmRef.nativeElement, INPUT_ERROR_DIRECTIVE);\n        } else {\n          this.renderer.removeClass(this.elmRef.nativeElement, INPUT_ERROR_DIRECTIVE);\n        }\n      });\n    }\n\n    this.disabled = (this.elmRef.nativeElement as HTMLInputElement).disabled;\n    this.setDisabledState(this.disabled);\n  }\n  setDisabledState(isDisabled: boolean) {\n    if (isDisabled) {\n      this.renderer.setAttribute(this.elmRef.nativeElement, 'disabled', 'true');\n      this.renderer.setAttribute(this.elmRef.nativeElement.parentNode, 'disabled', 'true');\n    } else {\n      this.renderer.removeAttribute(this.elmRef.nativeElement, 'disabled');\n      this.renderer.removeAttribute(this.elmRef.nativeElement.parentNode, 'disabled');\n    }\n  }\n\n  writeValue(val) {\n    if (this.elmRef) {\n      this.elmRef.nativeElement.value = val;\n      this.inputBehavior.updateState(null);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.state && changes.state.currentValue) {\n      this.updateByState();\n      }\n  }\n\n  ngAfterViewChecked(): void {\n    this.getElementChildren();\n    this.inputBehavior.setElement(this.elmRef.nativeElement);\n    this.inputBehavior.setUp();\n  }\n\n  /**\n   * Función que nos setea los estilos para el componente Input\n   *\n   * @memberof BcInputDirective\n   */\n  getElementChildren(): void {\n    this.parent = this.renderer.parentNode(this.elmRef.nativeElement);\n    this.input = this.parent.querySelector(BcCommonConstants.INPUT_TAG);\n    this.span = this.parent.querySelector(BcCommonConstants.SPAN_TAG);\n    this.textArea = this.parent.querySelector(BcCommonConstants.TEXTAREA_TAG);\n    this.iconLeft = this.parent.querySelector(`${BcCommonConstants.EM_TAG}:first-of-type`);\n    this.iconRight = this.parent.querySelector(`${BcCommonConstants.EM_TAG}:last-of-type`);\n    this.label = this.parent.querySelector(BcCommonConstants.LABEL_TAG);\n    this.setAriaDescriptor();\n  }\n  addClassWhenInputIsNormal() {\n    if (this.state === BcInputStates.error) {\n      this.class = `${INPUT} ${INPUT_ERROR_DIRECTIVE}`;\n    } else if (this.state === BcInputStates.success) {\n      this.class = `${INPUT} ${INPUT_SUCCESS_DIRECTIVE}`;\n    } else {\n      this.class = INPUT;\n    }\n  }\n  addClassWhenInputValidationAndNotInputValue() {\n    if (this.state === BcInputStates.error) {\n      this.class = `${INPUT} ${INPUT_ERROR_DIRECTIVE} ${INPUT_VALIDATION_CLASS}`;\n    } else if (this.state === BcInputStates.success) {\n      this.class = `${INPUT} ${INPUT_SUCCESS_DIRECTIVE} ${INPUT_VALIDATION_CLASS}`;\n    } else {\n      this.class = `${INPUT} ${INPUT_VALIDATION_CLASS}`;\n    }\n  }\n  addClassWhenInputValue() {\n    if (!this.inputValidation) {\n      this.addClassWhenInputValueAndNotInputValidation();\n    } else if (this.inputValidation) {\n      this.addClassWhenInputValidationAndInputValue();\n    }\n  }\n  addClassWhenInputValueAndNotInputValidation() {\n    if (this.state === BcInputStates.error) {\n      this.class = `${INPUT} ${INPUT_ERROR_DIRECTIVE} ${INPUT_VALUE_CLASS}`;\n    } else if (this.state === BcInputStates.success) {\n      this.class = `${INPUT} ${INPUT_SUCCESS_DIRECTIVE} ${INPUT_VALUE_CLASS}`;\n    } else {\n      this.class = `${INPUT} ${INPUT_VALUE_CLASS}`;\n    }\n  }\n  addClassWhenInputValidationAndInputValue() {\n    if (this.state === BcInputStates.error) {\n      this.class = `${INPUT} ${INPUT_ERROR_DIRECTIVE} ${INPUT_VALIDATION_CLASS} ${INPUT_VALUE_CLASS}`;\n    } else if (this.state === BcInputStates.success) {\n      this.class = `${INPUT} ${INPUT_SUCCESS_DIRECTIVE} ${INPUT_VALIDATION_CLASS} ${INPUT_VALUE_CLASS}`;\n    } else {\n      this.class = `${INPUT} ${INPUT_VALIDATION_CLASS} ${INPUT_VALUE_CLASS}`;\n    }\n  }\n  /**\n   * Función que actualiza los estilos del componente Input a partir de su estado.\n   * Los estados del componente que valida son {'valid', 'error', 'default'}.\n   *\n   * @memberof BcInputDirective\n   */\n  updateByState(): void {\n    if (!this.inputValidation && !this.inputValue) {\n      this.addClassWhenInputIsNormal();\n    } else if (this.inputValidation && !this.inputValue) {\n      this.addClassWhenInputValidationAndNotInputValue();\n    } else {\n      this.addClassWhenInputValue();\n    }\n  }\n\n  /**\n   * Esta función nos permite añadir un estilo recibiendo como parámetros el elemento y la clase deseada.\n   *\n   * @private\n   * @param {HTMLElement} element\n   * @param {string} styleClass\n   * @memberof BcInputDirective\n   */\n  private addClass(element: HTMLElement, styleClass: string): void {\n    if (element) {\n      this.renderer.addClass(element, styleClass);\n    }\n  }\n  /**\n   * Esta función nos permite remover un estilo recibiendo como parámetros el elemento y la clase no deseada.\n   *\n   * @private\n   * @param {HTMLElement} element\n   * @param {string} styleClass\n   * @memberof BcInputDirective\n   */\n  private removeClass(element: HTMLElement, styleClass: string): void {\n    if (element) {\n      this.renderer.removeClass(element, styleClass);\n\n      if (this.value !== null && this.value !== '' && this.value !== undefined) {\n        this.class = `${this.class} ${BC_INPUT_ACTIVE_CLASS}`;\n      }\n    }\n  }\n\n  /**\n   * Esta función permite obtener el descriptor para el atributo \"aria-label\",\n   * teniendo presente que exista el label, el input con un placeholder o un textarea con un placeholder.\n   *\n   * @return {*}  {string}\n   * @memberof BcInputDirective\n   */\n  private getAriaDescriptor(): string {\n    let response = '';\n    if (this.label) {\n      response = this.label.innerText;\n    } else if (this.input && this.input.placeholder) {\n      response = this.input.placeholder;\n    } else if (this.textArea && this.textArea.placeholder) {\n      response = this.textArea.placeholder;\n    } else if (this.span) {\n      response = this.span.innerText;\n    }\n    return response;\n  }\n\n  /**\n   * Esta función permite configurar el aria-descriptor teniendo en cuenta la función \"GetAriaDescriptor\",\n   * validándolos tanto para el input como para el textarea.\n   *\n   * @private\n   * @memberof BcInputDirective\n   */\n  private setAriaDescriptor(): void {\n    const response = this.getAriaDescriptor();\n    if (response && !this.ariaLabel) {\n      if (this.input) {\n        this.input.setAttribute(BcCommonConstants.ARIA_LABEL, response);\n      } else if (this.textArea) {\n        this.textArea.setAttribute(BcCommonConstants.ARIA_LABEL, response);\n      }\n    }\n  }\n  /**\n   * Este método permite pasar un valor con el formato del inputValue y remplazar los separadores\n   *\n   * @private\n   * @param val string\n   * @returns {*} string\n   * @memberof BcInputDirective\n   */\n  private replaceSeparator(val: string): string {\n    return val.replace(/\\./g, '');\n  }\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Optional, Output, Renderer2, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BcInputDateBehavior, INPUT_ERROR } from '@bancolombia/design-system-behaviors';\nimport { BcHelperService, BcGeneralInputComponent  } from '@bancolombia/design-system-web/bc-helpers';\n/**\n * Contenedor del input\n *\n * @export\n * @class BcFormFieldComponent\n * @implements {OnInit}\n * @implements {AfterViewInit}\n */\n@Component({\n  selector: 'bc-form-field',\n  template: `<div class=\"bc-form-field\" [id]=\"id\">\n    <ng-content></ng-content>\n  </div>`,\n})\nexport class BcFormFieldComponent extends BcGeneralInputComponent implements OnInit, AfterViewInit {\n  bcInputDateBehavior;\n  bcInputBehavior;\n  element;\n  /**\n   * Tipo de input (ingresar los tipos)\n   *\n   * @memberof BcFormFieldComponent\n   */\n  @Input() inputType = '';\n  /**\n   * Tipo de calendario.\n   *\n   * @type {string}\n   * @memberof BcFormFieldComponent\n   */\n  @Input() calendarType = '';\n\n  /**\n   * Id del elemento.\n   *\n   * @type {string}\n   * @memberof BcFormFieldComponent\n   */\n  @Input() id: string = this.bcHelperService.getId(this);\n\n  @Output() updateValue = new EventEmitter<number>();\n\n  constructor(@Self() @Optional() public controlDirective: NgControl,\n    private elmRef: ElementRef,\n    private bcHelperService: BcHelperService,\n    private renderer: Renderer2) {\n    super();\n    if (controlDirective) {\n      controlDirective.valueAccessor = this as BcGeneralInputComponent;\n    }\n  }\n\n  ngOnInit() {\n    if (this.inputType === 'date') {\n      this.bcInputDateBehavior = new BcInputDateBehavior();\n      this.bcInputDateBehavior.output = (value: any) => {\n        this.dispatchValue(value);\n      };\n    }\n    \n  }\n\n  ngAfterViewInit() {\n    \n    this.validateErrorState();\n    setTimeout(() => {\n      this.writeValue(this.value)\n    }, 0);\n  }\n\n  validateErrorState() {\n    const input = this.elmRef.nativeElement.querySelector('input');\n    if (this.controlDirective && this.controlDirective.statusChanges) {\n      this.controlDirective.statusChanges.subscribe(element => {\n        if (input) {\n          if (element === 'INVALID') {\n            this.renderer.addClass(input, INPUT_ERROR);\n          } else {\n            this.renderer.removeClass(input, INPUT_ERROR);\n          }\n        }\n      })\n    }\n  }\n\n  dispatchValue(value: any): void {\n    this.onInput(value);\n    this.updateValue.emit(this.value);\n  }\n\n  onInput(value: any): void {\n    this.value = value;\n    this.onTouch();\n    this.onChange(this.value);\n  }\n\n  writeValue(value:any ): void {\n    this.value = value\n    if (this.inputType === 'date' && this.bcInputDateBehavior) {\n      this.bcInputDateBehavior?.setValue(value)\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.bcInputDateBehavior.setDisabledState(isDisabled)\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BcInputDirective } from './bc-input.directive';\nimport { BcFormFieldComponent } from './bc-form-field/bc-form-field.component';\n\n/**\n * Importa la directiva de campos input con\n * los diseños de Bancolombia S.A.\n * @package bc-input\n *   @Directiva bc-input\n *   @param  theme Tema para input: default || dark\n *   @param typeInput Tipo de input: input-default || input-icon-left || input-icon-right || input-area\n *   @example\n *\n *    <input bc-input typeInput=\"input-default\" type=\"text\" placeholder=\"Text\" value=\"\">\n *    <input bc-input typeInput=\"input-icon-left\" theme=\"dark\" type=\"text\" placeholder=\"Text\" value=\"\">\n *  @component bc-form-field\n *  @param {string} inputType: seleccione \"date\" para selector con calendario\n *  @param {string} calendarType: seleccione \"split\" para un calendario con el selector dividido\n *\n *  @example\n *  <bc-form-field inputType=\"date\" calendarType=\"split\">\n *    <input bc-input typeInput=\"input-default-left\" type=\"date\" value=\"\" required/>\n *    <label>Split Date Picker</label>\n *    <em>calendar-alt</em>\n *    <span>Selecciona una fecha del calendario</span>\n *    </bc-form-field>\n *\n *\n *   @Advertencia El uso de colores por letras ejemplo red, green, blue no son compatibles\n *                  pues no hacen parte del sistema de diseño\n *\n * @author: Bancolombia S.A\n */\n@NgModule({\n  declarations: [BcInputDirective, BcFormFieldComponent],\n  imports: [CommonModule],\n  exports: [BcInputDirective, BcFormFieldComponent],\n})\nexport class BcInputModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}