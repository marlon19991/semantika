#!/bin/bash

# Test de Generaci√≥n de Componentes - Semantika Simplificado
# Verifica que el backend optimizado funcione correctamente

echo "üß™ Iniciando pruebas de generaci√≥n de componentes..."
echo "=================================================="

# Configuraci√≥n
API_URL="http://localhost:8000"
ENDPOINT="/generate-component"
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Funci√≥n para hacer peticiones POST
test_component() {
    local description="$1"
    local test_name="$2"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo ""
    echo "üîç Test $TOTAL_TESTS: $test_name"
    echo "   Descripci√≥n: '$description'"
    
    # Hacer petici√≥n
    response=$(curl -s -X POST "$API_URL$ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "{\"description\": \"$description\"}")
    
    if [ -n "$response" ]; then
        # Verificar que la respuesta tenga los campos esperados usando grep
        success=$(echo "$response" | grep -o '"success":[^,}]*' | cut -d':' -f2 | tr -d ' ')
        component_code=$(echo "$response" | grep -o '"component_code":"[^"]*"' | cut -d'"' -f4)
        component_type=$(echo "$response" | grep -o '"component_type":"[^"]*"' | cut -d'"' -f4)
        
        if [ "$success" = "true" ] && [ -n "$component_code" ] && [ -n "$component_type" ]; then
            echo "   ‚úÖ PAS√ì - Tipo: $component_type"
            echo "   üìù C√≥digo: ${component_code:0:50}..."
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo "   ‚ùå FALL√ì - Respuesta incompleta"
            echo "   üìÑ Respuesta: $response"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    else
        echo "   ‚ùå FALL√ì - Sin respuesta"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
}

# Verificar que el servidor est√© corriendo
echo "üîå Verificando conexi√≥n con el servidor..."
if ! curl -s "$API_URL" > /dev/null 2>&1; then
    echo "‚ùå Error: El servidor no est√° corriendo en $API_URL"
    echo "   Ejecuta: ./start-semantika.sh"
    exit 1
fi
echo "‚úÖ Servidor conectado"

# Ejecutar pruebas
echo ""
echo "üöÄ Ejecutando pruebas de componentes..."

# Pruebas de botones
test_component "bot√≥n primario azul" "Bot√≥n Primario"
test_component "bot√≥n para guardar datos" "Bot√≥n Guardar"
test_component "bot√≥n de cancelar rojo" "Bot√≥n Cancelar"
test_component "bot√≥n secundario peque√±o" "Bot√≥n Secundario"

# Pruebas de tarjetas
test_component "tarjeta de producto con precio" "Tarjeta Producto"
test_component "tarjeta de usuario con avatar" "Tarjeta Usuario"

# Pruebas de formularios
test_component "campo de email obligatorio" "Campo Email"
test_component "formulario de login completo" "Formulario Login"
test_component "campo de contrase√±a con validaci√≥n" "Campo Password"

# Pruebas de alertas
test_component "alerta de √©xito verde" "Alerta √âxito"
test_component "alerta de error importante" "Alerta Error"
test_component "mensaje de advertencia amarillo" "Alerta Warning"

# Pruebas de modales
test_component "modal de confirmaci√≥n para eliminar" "Modal Confirmaci√≥n"
test_component "ventana modal con formulario" "Modal Formulario"

# Pruebas de casos complejos
test_component "bot√≥n grande azul que diga Confirmar Pago" "Caso Complejo 1"
test_component "tarjeta con imagen, t√≠tulo y bot√≥n de acci√≥n" "Caso Complejo 2"

# Mostrar resultados
echo ""
echo "=================================================="
echo "üìä RESUMEN DE PRUEBAS"
echo "=================================================="
echo "Total de pruebas: $TOTAL_TESTS"
echo "‚úÖ Pasaron: $PASSED_TESTS"
echo "‚ùå Fallaron: $FAILED_TESTS"

if [ $FAILED_TESTS -eq 0 ]; then
    echo ""
    echo "üéâ ¬°TODAS LAS PRUEBAS PASARON!"
    echo "   El generador de componentes funciona correctamente"
    exit 0
else
    echo ""
    echo "‚ö†Ô∏è  ALGUNAS PRUEBAS FALLARON"
    echo "   Revisa los errores arriba"
    exit 1
fi 