#!/usr/bin/env python3
"""
Script de Pruebas del Sistema de Control de Calidad de Semantika v2.0

Este script demuestra c√≥mo el sistema de validaci√≥n autom√°tica
asegura que cada respuesta tenga al menos 80% de exactitud.
"""

import asyncio
import json
import sys
import os

# Agregar el directorio del servicio al path
sys.path.append('services/llm-service/app')

from services.quality_control_system import validate_and_ensure_quality

async def test_quality_control():
    """Prueba el sistema de control de calidad con diferentes casos"""
    
    print("üöÄ INICIANDO PRUEBAS DEL SISTEMA DE CONTROL DE CALIDAD")
    print("=" * 70)
    
    # Casos de prueba
    test_cases = [
        {
            "name": "C√≥digo de baja calidad - Sin atributos",
            "code": '<button>Acci√≥n</button>',
            "user_request": "bot√≥n azul grande que diga Confirmar",
            "expected_improvements": ["componente v√°lido", "propiedades", "accesibilidad"]
        },
        {
            "name": "C√≥digo de calidad media - Componente correcto pero incompleto",
            "code": '<bc-button>Enviar</bc-button>',
            "user_request": "bot√≥n verde peque√±o que diga Enviar",
            "expected_improvements": ["propiedades", "accesibilidad"]
        },
        {
            "name": "C√≥digo de alta calidad - Completo y correcto",
            "code": '<bc-button appearance="success" size="small" aria-label="Bot√≥n Enviar">Enviar</bc-button>',
            "user_request": "bot√≥n verde peque√±o que diga Enviar",
            "expected_improvements": []
        },
        {
            "name": "Input sin label - Error cr√≠tico",
            "code": '<input type="text" placeholder="Nombre">',
            "user_request": "campo de texto para el nombre",
            "expected_improvements": ["componente v√°lido", "accesibilidad", "sintaxis"]
        },
        {
            "name": "C√≥digo con errores sint√°cticos",
            "code": '<bc-button appearance=primary size=large>Confirmar</bc-button>',
            "user_request": "bot√≥n primario grande",
            "expected_improvements": ["sintaxis"]
        }
    ]
    
    # Ejecutar pruebas
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã PRUEBA {i}: {test_case['name']}")
        print("-" * 50)
        
        print(f"üíª C√≥digo original:")
        print(f"   {test_case['code']}")
        
        print(f"üë§ Solicitud del usuario:")
        print(f"   {test_case['user_request']}")
        
        # Ejecutar validaci√≥n
        trace_id = f"test-{i:03d}"
        
        try:
            print(f"\nüéØ Ejecutando control de calidad...")
            
            quality_assessment = await validate_and_ensure_quality(
                test_case['code'],
                test_case['user_request'],
                trace_id
            )
            
            # Mostrar resultados
            print(f"\nüìä RESULTADOS:")
            print(f"   Puntuaci√≥n general: {quality_assessment.accuracy_percentage}%")
            print(f"   ¬øCumple umbral 80%?: {'‚úÖ S√ç' if quality_assessment.passed else '‚ùå NO'}")
            print(f"   Nivel de confianza: {quality_assessment.confidence_level}")
            print(f"   Iteraciones realizadas: {quality_assessment.iteration_count}")
            print(f"   ¬øSe mejor√≥ el c√≥digo?: {'‚úÖ S√ç' if quality_assessment.improvement_applied else '‚ùå NO'}")
            
            if quality_assessment.improvement_applied:
                print(f"\nüîß C√≥digo mejorado:")
                print(f"   {quality_assessment.final_code}")
            
            # Mostrar validaciones detalladas
            print(f"\nüîç Validaciones detalladas:")
            for vr in quality_assessment.validation_results:
                status = "‚úÖ" if vr.passed else "‚ùå"
                print(f"   {status} {vr.criterion}: {vr.score:.2f} ({vr.score*100:.0f}%)")
                if vr.suggestions:
                    print(f"      Sugerencias: {', '.join(vr.suggestions)}")
            
            print(f"\n‚è±Ô∏è Tiempo de procesamiento: {quality_assessment.processing_time_ms}ms")
            
            # Verificar expectativas
            if quality_assessment.passed:
                print(f"üéâ ¬°√âXITO! El c√≥digo alcanz√≥ el est√°ndar de calidad del 80%")
            else:
                print(f"‚ö†Ô∏è ADVERTENCIA: No se alcanz√≥ el 80% despu√©s de {quality_assessment.iteration_count} iteraciones")
            
        except Exception as e:
            print(f"‚ùå ERROR en la prueba: {e}")
        
        print("=" * 70)
    
    print("\nüèÅ PRUEBAS COMPLETADAS")
    print("\nüìã RESUMEN DEL SISTEMA DE CONTROL DE CALIDAD:")
    print("   ‚Ä¢ Valida autom√°ticamente cada c√≥digo generado")
    print("   ‚Ä¢ Asegura m√≠nimo 80% de exactitud")
    print("   ‚Ä¢ Refina iterativamente hasta 3 intentos")
    print("   ‚Ä¢ Verifica adherencia al Design System de Bancolombia")
    print("   ‚Ä¢ Garantiza cumplimiento de accesibilidad")

async def test_interactive_validation():
    """Prueba interactiva del sistema"""
    
    print("\nüéÆ MODO INTERACTIVO - Ingresa tu propio c√≥digo para validar")
    print("=" * 60)
    
    while True:
        print("\nüíª Ingresa el c√≥digo a validar (o 'quit' para salir):")
        code = input("> ")
        
        if code.lower() in ['quit', 'exit', 'q']:
            break
        
        if not code.strip():
            continue
        
        print("üë§ Ingresa la solicitud original del usuario (opcional):")
        user_request = input("> ") or "Validar c√≥digo existente"
        
        try:
            trace_id = "interactive-test"
            
            print(f"\nüéØ Validando c√≥digo...")
            
            quality_assessment = await validate_and_ensure_quality(
                code, user_request, trace_id
            )
            
            print(f"\nüìä RESULTADO: {quality_assessment.accuracy_percentage}% de exactitud")
            print(f"   Estado: {'‚úÖ APROBADO' if quality_assessment.passed else '‚ùå NECESITA MEJORAS'}")
            
            if quality_assessment.improvement_applied:
                print(f"\nüîß C√≥digo mejorado:")
                print(f"   {quality_assessment.final_code}")
            
            print(f"\nüîç Detalles:")
            for vr in quality_assessment.validation_results:
                status = "‚úÖ" if vr.passed else "‚ùå"
                print(f"   {status} {vr.criterion}: {vr.score*100:.0f}%")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    print("\nüëã ¬°Hasta luego!")

if __name__ == "__main__":
    print("üéØ SISTEMA DE CONTROL DE CALIDAD SEMANTIKA v2.0")
    print("Validaci√≥n autom√°tica hasta 80% de exactitud m√≠nima")
    print("=" * 70)
    
    # Men√∫ principal
    print("\nSelecciona el tipo de prueba:")
    print("1. Pruebas autom√°ticas (casos predefinidos)")
    print("2. Prueba interactiva (ingresa tu c√≥digo)")
    print("3. Ambas")
    
    choice = input("\nTu elecci√≥n (1/2/3): ").strip()
    
    if choice in ['1', '3']:
        print("\nü§ñ Ejecutando pruebas autom√°ticas...")
        asyncio.run(test_quality_control())
    
    if choice in ['2', '3']:
        print("\nüéÆ Iniciando modo interactivo...")
        asyncio.run(test_interactive_validation())
    
    if choice not in ['1', '2', '3']:
        print("‚ùå Opci√≥n no v√°lida") 